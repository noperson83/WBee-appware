# Generated by Django 5.2 on 2025-06-20 04:04

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("company", "__first__"),
        ("location", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="Certification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Certification name", max_length=200, unique=True
                    ),
                ),
                (
                    "certification_code",
                    models.CharField(
                        help_text="Short code", max_length=20, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Certification description"),
                ),
                (
                    "issuing_organization",
                    models.CharField(
                        blank=True,
                        help_text="Organization that issues certification",
                        max_length=200,
                    ),
                ),
                (
                    "website_url",
                    models.URLField(blank=True, help_text="Certification website"),
                ),
                ("requires_renewal", models.BooleanField(default=True)),
                (
                    "renewal_period_months",
                    models.PositiveIntegerField(
                        default=24, help_text="Renewal period in months"
                    ),
                ),
                ("continuing_education_required", models.BooleanField(default=False)),
                (
                    "typical_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Typical certification cost",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "training_hours_required",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "business_categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Which business types use this certification",
                        to="location.businesscategory",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Clearance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Clearance name", max_length=200, unique=True
                    ),
                ),
                (
                    "clearance_code",
                    models.CharField(
                        help_text="Short code", max_length=20, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Clearance description"),
                ),
                (
                    "issuing_authority",
                    models.CharField(
                        blank=True,
                        help_text="Who issues this clearance",
                        max_length=200,
                    ),
                ),
                (
                    "clearance_level",
                    models.CharField(
                        blank=True,
                        help_text="Clearance level (Secret, Top Secret, etc.)",
                        max_length=50,
                    ),
                ),
                ("requires_renewal", models.BooleanField(default=True)),
                (
                    "renewal_period_months",
                    models.PositiveIntegerField(
                        default=60, help_text="Renewal period in months"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "business_categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Which business types use this clearance",
                        to="location.businesscategory",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="JobPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(help_text="Position title", max_length=200)),
                (
                    "position_code",
                    models.CharField(
                        help_text="Position code (MGR001, TECH001)",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Job description"),
                ),
                (
                    "responsibilities",
                    models.TextField(blank=True, help_text="Key responsibilities"),
                ),
                (
                    "requirements",
                    models.TextField(blank=True, help_text="Required qualifications"),
                ),
                (
                    "compensation_type",
                    models.CharField(
                        choices=[
                            ("hourly", "Hourly"),
                            ("salary", "Salary"),
                            ("commission", "Commission"),
                            ("contract", "Contract"),
                        ],
                        default="hourly",
                        max_length=20,
                    ),
                ),
                (
                    "min_hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum hourly rate",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "max_hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum hourly rate",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "min_annual_salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Minimum annual salary",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "max_annual_salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum annual salary",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "employment_type",
                    models.CharField(
                        choices=[
                            ("full_time", "Full Time"),
                            ("part_time", "Part Time"),
                            ("contract", "Contract"),
                            ("temporary", "Temporary"),
                            ("seasonal", "Seasonal"),
                        ],
                        default="full_time",
                        max_length=20,
                    ),
                ),
                (
                    "job_level",
                    models.CharField(
                        choices=[
                            ("entry", "Entry Level"),
                            ("junior", "Junior"),
                            ("mid", "Mid Level"),
                            ("senior", "Senior"),
                            ("lead", "Lead"),
                            ("manager", "Manager"),
                            ("director", "Director"),
                            ("executive", "Executive"),
                        ],
                        default="mid",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_billable",
                    models.BooleanField(
                        default=True,
                        help_text="Can this position bill time to clients?",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        help_text="Department this position belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="positions",
                        to="company.department",
                    ),
                ),
                (
                    "reports_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Position this role reports to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="direct_reports",
                        to="hr.jobposition",
                    ),
                ),
                (
                    "required_certifications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="required_for_positions",
                        to="hr.certification",
                    ),
                ),
                (
                    "required_clearances",
                    models.ManyToManyField(
                        blank=True,
                        related_name="required_for_positions",
                        to="hr.clearance",
                    ),
                ),
            ],
            options={
                "ordering": ["department", "title"],
                "unique_together": {("department", "title")},
            },
        ),
        migrations.CreateModel(
            name="Worker",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        max_length=255,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(help_text="First name", max_length=100),
                ),
                ("last_name", models.CharField(help_text="Last name", max_length=100)),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, help_text="Middle name", max_length=100
                    ),
                ),
                (
                    "preferred_name",
                    models.CharField(
                        blank=True, help_text="Preferred name", max_length=100
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(blank=True, max_length=200),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "emergency_contact_relationship",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "date_of_birth",
                    models.DateField(blank=True, help_text="Date of birth", null=True),
                ),
                ("gender", models.CharField(blank=True, default="", max_length=50)),
                (
                    "employee_id",
                    models.CharField(
                        help_text="Employee ID number", max_length=50, unique=True
                    ),
                ),
                (
                    "employment_status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("on_leave", "On Leave"),
                            ("suspended", "Suspended"),
                            ("terminated", "Terminated"),
                            ("resigned", "Resigned"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "date_of_hire",
                    models.DateField(blank=True, help_text="Date of hire", null=True),
                ),
                (
                    "date_of_termination",
                    models.DateField(
                        blank=True, help_text="Date of termination", null=True
                    ),
                ),
                (
                    "current_hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Current hourly rate",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "current_annual_salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Current annual salary",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True, help_text="Professional biography", max_length=500
                    ),
                ),
                (
                    "skills",
                    models.JSONField(
                        blank=True, default=list, help_text="Skills and competencies"
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        help_text="Profile picture",
                        null=True,
                        upload_to="uploads/workers/profiles/%Y/%m/%d/",
                    ),
                ),
                (
                    "resume",
                    models.FileField(
                        blank=True,
                        help_text="Resume/CV",
                        null=True,
                        upload_to="uploads/workers/resumes/%Y/%m/%d/",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, help_text="Staff user (can access admin)"
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(default=False, help_text="Admin user"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(default=False, help_text="Superuser"),
                ),
                (
                    "roles",
                    models.JSONField(
                        blank=True, default=list, help_text="Business-specific roles"
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True, default=dict, help_text="Custom employee data"
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        help_text="Company",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workers",
                        to="company.company",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        help_text="Department",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="workers",
                        to="company.department",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Groups this worker belongs to",
                        related_name="worker_set",
                        to="auth.group",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        help_text="Direct manager",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="direct_reports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "office",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary office location",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="workers",
                        to="company.office",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this worker",
                        related_name="worker_set",
                        to="auth.permission",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current position",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="workers",
                        to="hr.jobposition",
                    ),
                ),
            ],
            options={
                "ordering": ["first_name", "last_name"],
            },
        ),
        migrations.CreateModel(
            name="WorkerCertification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "certification_number",
                    models.CharField(
                        blank=True, help_text="Certification ID/Number", max_length=100
                    ),
                ),
                (
                    "earned_date",
                    models.DateField(help_text="Date certification was earned"),
                ),
                (
                    "expiration_date",
                    models.DateField(
                        blank=True, help_text="Expiration date", null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("training_provider", models.CharField(blank=True, max_length=200)),
                (
                    "training_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("continuing_education_hours", models.PositiveIntegerField(default=0)),
                (
                    "certificate_file",
                    models.FileField(
                        blank=True,
                        help_text="Certificate document",
                        null=True,
                        upload_to="uploads/workers/certifications/%Y/%m/%d/",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "certification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="hr.certification",
                    ),
                ),
                (
                    "worker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-earned_date"],
                "unique_together": {("worker", "certification")},
            },
        ),
        migrations.AddField(
            model_name="worker",
            name="certifications",
            field=models.ManyToManyField(
                blank=True,
                related_name="workers",
                through="hr.WorkerCertification",
                to="hr.certification",
            ),
        ),
        migrations.CreateModel(
            name="WorkerClearance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "clearance_number",
                    models.CharField(
                        blank=True, help_text="Clearance ID/Number", max_length=100
                    ),
                ),
                (
                    "granted_date",
                    models.DateField(help_text="Date clearance was granted"),
                ),
                (
                    "expiration_date",
                    models.DateField(
                        blank=True, help_text="Expiration date", null=True
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("granting_authority", models.CharField(blank=True, max_length=200)),
                ("notes", models.TextField(blank=True)),
                (
                    "clearance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="hr.clearance"
                    ),
                ),
                (
                    "worker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-granted_date"],
                "unique_together": {("worker", "clearance")},
            },
        ),
        migrations.AddField(
            model_name="worker",
            name="clearances",
            field=models.ManyToManyField(
                blank=True,
                related_name="workers",
                through="hr.WorkerClearance",
                to="hr.clearance",
            ),
        ),
        migrations.CreateModel(
            name="PerformanceReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("review_period_start", models.DateField()),
                ("review_period_end", models.DateField()),
                ("review_date", models.DateField(default=datetime.date.today)),
                (
                    "review_type",
                    models.CharField(
                        choices=[
                            ("annual", "Annual Review"),
                            ("probationary", "Probationary Review"),
                            ("mid_year", "Mid-Year Review"),
                            ("project", "Project Review"),
                            ("disciplinary", "Disciplinary Review"),
                        ],
                        default="annual",
                        max_length=20,
                    ),
                ),
                (
                    "overall_rating",
                    models.PositiveIntegerField(
                        help_text="Overall performance rating (1-5)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "quality_of_work",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "productivity",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "communication",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "teamwork",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "leadership",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "accomplishments",
                    models.TextField(blank=True, help_text="Key accomplishments"),
                ),
                (
                    "areas_for_improvement",
                    models.TextField(blank=True, help_text="Areas needing improvement"),
                ),
                (
                    "goals_for_next_period",
                    models.TextField(
                        blank=True, help_text="Goals for next review period"
                    ),
                ),
                (
                    "manager_comments",
                    models.TextField(blank=True, help_text="Manager comments"),
                ),
                (
                    "employee_comments",
                    models.TextField(blank=True, help_text="Employee self-assessment"),
                ),
                ("next_review_date", models.DateField(blank=True, null=True)),
                (
                    "reviewer",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="conducted_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "worker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performance_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-review_date"],
                "indexes": [
                    models.Index(
                        fields=["worker", "review_date"],
                        name="hr_performa_worker__eeca71_idx",
                    ),
                    models.Index(
                        fields=["review_type"], name="hr_performa_review__6e11ae_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TimeOffRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("start_date", models.DateField(help_text="Start date of time off")),
                ("end_date", models.DateField(help_text="End date of time off")),
                (
                    "time_off_type",
                    models.CharField(
                        choices=[
                            ("vacation", "Vacation"),
                            ("sick", "Sick Leave"),
                            ("personal", "Personal Day"),
                            ("bereavement", "Bereavement"),
                            ("jury_duty", "Jury Duty"),
                            ("military", "Military Leave"),
                            ("maternity", "Maternity Leave"),
                            ("paternity", "Paternity Leave"),
                            ("unpaid", "Unpaid Leave"),
                        ],
                        default="vacation",
                        max_length=20,
                    ),
                ),
                (
                    "is_paid",
                    models.BooleanField(
                        default=True, help_text="Is this paid time off?"
                    ),
                ),
                (
                    "reason",
                    models.TextField(blank=True, help_text="Reason for time off"),
                ),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("denied", "Denied"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("approved_date", models.DateTimeField(blank=True, null=True)),
                (
                    "manager_notes",
                    models.TextField(blank=True, help_text="Manager comments"),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_time_off_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "worker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="time_off_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
                "indexes": [
                    models.Index(
                        fields=["worker", "approval_status"],
                        name="hr_timeoffr_worker__00c837_idx",
                    ),
                    models.Index(
                        fields=["start_date", "end_date"],
                        name="hr_timeoffr_start_d_050767_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="worker",
            index=models.Index(
                fields=["company", "employment_status"],
                name="hr_worker_company_119714_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="worker",
            index=models.Index(
                fields=["department"], name="hr_worker_departm_bcfce4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="worker",
            index=models.Index(fields=["manager"], name="hr_worker_manager_8fc1b9_idx"),
        ),
        migrations.AddIndex(
            model_name="worker",
            index=models.Index(
                fields=["employee_id"], name="hr_worker_employe_eb774f_idx"
            ),
        ),
    ]
