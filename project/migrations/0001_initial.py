# Generated by Django 5.2 on 2025-06-20 04:04

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("location", "0001_initial"),
        ("material", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ProjectMilestone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("target_date", models.DateField()),
                ("actual_date", models.DateField(blank=True, null=True)),
                ("is_critical", models.BooleanField(default=False)),
                ("is_complete", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["target_date"],
            },
        ),
        migrations.CreateModel(
            name="ProjectTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Template name", max_length=200)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Template description"),
                ),
                (
                    "estimated_duration_days",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "default_markup",
                    models.DecimalField(decimal_places=2, default=1.15, max_digits=5),
                ),
                (
                    "default_burden",
                    models.DecimalField(decimal_places=2, default=1.65, max_digits=5),
                ),
                (
                    "template_tasks",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Default tasks for this project type",
                    ),
                ),
                (
                    "required_materials",
                    models.JSONField(
                        blank=True, default=list, help_text="Common materials needed"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["business_category", "name"],
            },
        ),
        migrations.CreateModel(
            name="ScopeOfWork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "area",
                    models.CharField(
                        help_text="Area or location within the project", max_length=200
                    ),
                ),
                (
                    "system_type",
                    models.CharField(
                        help_text="Type of system or work", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed scope description"
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=100, help_text="Display order priority"
                    ),
                ),
                (
                    "phase",
                    models.CharField(
                        blank=True,
                        help_text="Project phase (Phase 1, Phase 2, etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "percent_complete",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=18, null=True
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=18, null=True
                    ),
                ),
            ],
            options={
                "ordering": ["priority", "area"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "job_number",
                    models.CharField(
                        db_index=True,
                        help_text="Unique project identifier (can include letters)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "revision",
                    models.CharField(
                        blank=True, help_text="Project revision/version", max_length=50
                    ),
                ),
                ("name", models.CharField(help_text="Project name", max_length=200)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed project description",
                        max_length=4000,
                    ),
                ),
                (
                    "scope_overview",
                    models.TextField(
                        blank=True,
                        help_text="High-level scope summary",
                        max_length=2000,
                    ),
                ),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True,
                        help_text="Main project image",
                        null=True,
                        upload_to="uploads/project/images/%Y/%m/%d/",
                    ),
                ),
                (
                    "site_contact",
                    models.TextField(
                        blank=True,
                        help_text="On-site contact information",
                        max_length=500,
                    ),
                ),
                (
                    "date_requested",
                    models.DateField(
                        blank=True, help_text="Date project was requested", null=True
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, help_text="Planned start date", null=True
                    ),
                ),
                (
                    "due_date",
                    models.DateField(blank=True, help_text="Due date", null=True),
                ),
                (
                    "completed_date",
                    models.DateField(
                        blank=True, help_text="Actual completion date", null=True
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated project cost",
                        max_digits=20,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "contract_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Contract value",
                        max_digits=20,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "markup_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.15,
                        help_text="Material markup (1.15 = 15% markup)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.00")),
                            django.core.validators.MaxValueValidator(Decimal("5.00")),
                        ],
                    ),
                ),
                (
                    "burden_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.65,
                        help_text="Labor burden percentage",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.00")),
                            django.core.validators.MaxValueValidator(Decimal("3.00")),
                        ],
                    ),
                ),
                (
                    "license_markup",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.15,
                        help_text="Software/license markup",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("1.00")),
                            django.core.validators.MaxValueValidator(Decimal("3.00")),
                        ],
                    ),
                ),
                (
                    "invoiced_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Amount invoiced to date",
                        max_digits=20,
                    ),
                ),
                (
                    "paid_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Amount paid to date",
                        max_digits=20,
                    ),
                ),
                (
                    "paid_date",
                    models.DateField(
                        blank=True, help_text="Date final payment received", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        db_index=True,
                        default="prospect",
                        help_text="Project status (configurable per business type)",
                        max_length=50,
                    ),
                ),
                (
                    "tax_status",
                    models.CharField(
                        default="taxable",
                        help_text="Tax classification (configurable)",
                        max_length=50,
                    ),
                ),
                (
                    "division",
                    models.CharField(
                        blank=True,
                        help_text="Business division/department (configurable)",
                        max_length=50,
                    ),
                ),
                (
                    "project_type",
                    models.CharField(
                        default="commercial",
                        help_text="Project type classification (configurable)",
                        max_length=50,
                    ),
                ),
                (
                    "percent_complete",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Completion percentage (0-100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "client_satisfaction_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Client satisfaction (1-5 stars)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low Priority"),
                            ("normal", "Normal Priority"),
                            ("high", "High Priority"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True, default=dict, help_text="Custom project data"
                    ),
                ),
                (
                    "internal_notes",
                    models.TextField(blank=True, help_text="Internal project notes"),
                ),
                (
                    "pricing_disclaimer",
                    models.TextField(
                        blank=True,
                        help_text="Pricing terms and disclaimers",
                        max_length=2000,
                    ),
                ),
                (
                    "estimator",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who estimated this project",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="estimated_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        help_text="Location where this project takes place",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="projects",
                        to="location.location",
                    ),
                ),
                (
                    "project_manager",
                    models.ForeignKey(
                        blank=True,
                        help_text="Project manager",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Field supervisor/foreman",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supervised_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "team_leads",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Team leads for this project",
                        related_name="led_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "team_members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Team members assigned to this project",
                        related_name="assigned_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-job_number"],
            },
        ),
        migrations.CreateModel(
            name="ProjectChange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("change_type", models.CharField(max_length=50)),
                ("description", models.TextField()),
                (
                    "cost_impact",
                    models.DecimalField(decimal_places=2, default=0, max_digits=18),
                ),
                ("schedule_impact_days", models.IntegerField(default=0)),
                ("requested_by", models.CharField(blank=True, max_length=100)),
                ("approved_by", models.CharField(blank=True, max_length=100)),
                ("approved_date", models.DateField(blank=True, null=True)),
                ("is_approved", models.BooleanField(default=False)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="changes",
                        to="project.project",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProjectMaterial",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "material_type",
                    models.CharField(
                        choices=[
                            ("device", "Device"),
                            ("hardware", "Hardware"),
                            ("software", "Software"),
                            ("license", "License"),
                            ("travel", "Travel"),
                        ],
                        default="device",
                        max_length=20,
                    ),
                ),
                ("quantity", models.PositiveIntegerField(default=1)),
                (
                    "unit_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=18),
                ),
                ("delivered_date", models.DateField(blank=True, null=True)),
                ("installed_date", models.DateField(blank=True, null=True)),
                ("tested_date", models.DateField(blank=True, null=True)),
                ("status", models.CharField(default="quoted", max_length=20)),
                ("installation_location", models.CharField(blank=True, max_length=200)),
                ("serial_numbers", models.JSONField(blank=True, default=list)),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="material.product",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="material_items",
                        to="project.project",
                    ),
                ),
            ],
            options={
                "ordering": ["project", "material_type"],
            },
        ),
    ]
