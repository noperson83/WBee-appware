# Generated by Django 5.2 on 2025-06-20 04:04

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("hr", "0001_initial"),
        ("project", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "title",
                    models.CharField(
                        help_text="Brief task description", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Detailed task description"),
                ),
                (
                    "allotted_time",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.25"),
                        help_text="Estimated hours to complete this task",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "team_size",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Number of people required",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                            ("expert", "Expert"),
                        ],
                        default="medium",
                        help_text="Task difficulty level",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("todo", "To Do"),
                            ("in_progress", "In Progress"),
                            ("review", "Under Review"),
                            ("blocked", "Blocked"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="todo",
                        help_text="Current task status",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Critical"),
                            (2, "High"),
                            (3, "Normal"),
                            (4, "Low"),
                            (5, "Backlog"),
                        ],
                        default=3,
                        help_text="Task priority level",
                    ),
                ),
                (
                    "created_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this task was created",
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True,
                        help_text="When this task should be completed",
                        null=True,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="When work on this task should begin",
                        null=True,
                    ),
                ),
                (
                    "completed_date",
                    models.DateTimeField(
                        blank=True, help_text="When this task was completed", null=True
                    ),
                ),
                (
                    "completed",
                    models.BooleanField(
                        default=False, help_text="Whether this task is completed"
                    ),
                ),
                (
                    "completion_percentage",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Percentage of task completed (0-100)",
                        validators=[django.core.validators.MaxValueValidator(100)],
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes or instructions",
                        null=True,
                    ),
                ),
                (
                    "blockers",
                    models.TextField(
                        blank=True,
                        help_text="What is blocking this task from completion",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False, help_text="Task completion requires approval"
                    ),
                ),
                (
                    "approved_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When task completion was approved",
                        null=True,
                    ),
                ),
                (
                    "actual_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual hours spent on this task",
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who approved task completion",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="User assigned to complete this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this task",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "depends_on",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tasks that must be completed before this one",
                        related_name="blocks",
                        to="todo.task",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        blank=True,
                        help_text="Position/role required for this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="required_for_tasks",
                        to="hr.jobposition",
                    ),
                ),
            ],
            options={
                "ordering": ["priority", "due_date", "created_date"],
            },
        ),
        migrations.CreateModel(
            name="TaskAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Task-related file",
                        upload_to="task_attachments/%Y/%m/%d/",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of the attachment",
                        max_length=200,
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="todo.task",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        help_text="User who uploaded this file",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Task list name", max_length=200)),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        help_text="Auto-generated URL slug",
                        null=True,
                        populate_from=["name", "scope", "group", "id"],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this task list"
                    ),
                ),
                (
                    "list_type",
                    models.CharField(
                        choices=[
                            ("project", "Project Tasks"),
                            ("maintenance", "Maintenance"),
                            ("training", "Training"),
                            ("daily", "Daily Operations"),
                            ("backlog", "Backlog"),
                            ("template", "Task Template"),
                            ("personal", "Personal Tasks"),
                            ("custom", "Custom List"),
                        ],
                        default="custom",
                        help_text="Type of task list",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        default=9999,
                        help_text="Priority (lower numbers = higher priority)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(99999),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("on_hold", "On Hold"),
                            ("completed", "Completed"),
                            ("archived", "Archived"),
                        ],
                        default="active",
                        help_text="Current status of the task list",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this task list is currently active",
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="Use this list as a template for creating new lists",
                    ),
                ),
                (
                    "auto_assign",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically assign new tasks to group members",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Tasks require approval before completion",
                    ),
                ),
                (
                    "send_notifications",
                    models.BooleanField(
                        default=True, help_text="Send notifications for task updates"
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="When work on this list should begin",
                        null=True,
                    ),
                ),
                (
                    "target_completion_date",
                    models.DateField(
                        blank=True,
                        help_text="Target completion date for all tasks",
                        null=True,
                    ),
                ),
                (
                    "completed_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when all tasks were completed",
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this task list",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_task_lists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        help_text="Group that owns this task list",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="auth.group",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current owner/manager of this task list",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_task_lists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated project",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_lists",
                        to="project.project",
                    ),
                ),
                (
                    "scope",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated scope of work",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_lists",
                        to="project.scopeofwork",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Task Lists",
                "ordering": ["priority", "name"],
            },
        ),
        migrations.AddField(
            model_name="task",
            name="task_list",
            field=models.ForeignKey(
                help_text="Task list this task belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tasks",
                to="todo.tasklist",
            ),
        ),
        migrations.CreateModel(
            name="TaskTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("project", "Project Tasks"),
                            ("maintenance", "Maintenance"),
                            ("onboarding", "Employee Onboarding"),
                            ("training", "Training"),
                            ("inspection", "Inspection"),
                            ("custom", "Custom"),
                        ],
                        default="custom",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskTemplateItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "allotted_time",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.25"), max_digits=8
                    ),
                ),
                ("team_size", models.PositiveIntegerField(default=1)),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                            ("expert", "Expert"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "priority",
                    models.PositiveIntegerField(
                        choices=[
                            (1, "Critical"),
                            (2, "High"),
                            (3, "Normal"),
                            (4, "Low"),
                            (5, "Backlog"),
                        ],
                        default=3,
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "position",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="hr.jobposition",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="template_tasks",
                        to="todo.tasktemplate",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "priority"],
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("body", models.TextField(help_text="Comment content")),
                (
                    "comment_type",
                    models.CharField(
                        choices=[
                            ("note", "General Note"),
                            ("update", "Status Update"),
                            ("question", "Question"),
                            ("blocker", "Blocker Reported"),
                            ("approval", "Approval Comment"),
                            ("review", "Review Comment"),
                        ],
                        default="note",
                        help_text="Type of comment",
                        max_length=20,
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this comment was posted",
                    ),
                ),
                (
                    "is_private",
                    models.BooleanField(
                        default=False,
                        help_text="Only visible to task assignee and creator",
                    ),
                ),
                (
                    "requires_response",
                    models.BooleanField(
                        default=False, help_text="This comment requires a response"
                    ),
                ),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Optional file attachment",
                        null=True,
                        upload_to="task_comments/%Y/%m/%d/",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="User who wrote this comment",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        help_text="Task this comment relates to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="todo.task",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "indexes": [
                    models.Index(
                        fields=["task", "date"], name="todo_commen_task_id_f135b7_idx"
                    ),
                    models.Index(
                        fields=["author", "date"], name="todo_commen_author__02462c_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="tasklist",
            index=models.Index(
                fields=["group", "is_active"], name="todo_taskli_group_i_c913c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasklist",
            index=models.Index(
                fields=["priority", "status"], name="todo_taskli_priorit_74d483_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tasklist",
            index=models.Index(
                fields=["project", "scope"], name="todo_taskli_project_64a5e5_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tasklist",
            unique_together={("group", "slug")},
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["assigned_to", "completed"], name="todo_task_assigne_43e577_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["due_date", "completed"], name="todo_task_due_dat_1648b1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["task_list", "status"], name="todo_task_task_li_8e82c2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["priority", "due_date"], name="todo_task_priorit_8f5b76_idx"
            ),
        ),
    ]
