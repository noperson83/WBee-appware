# Generated by Django 5.2 on 2025-06-28 20:54

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import helpdesk.models.communication
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EscalationExclusion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of this escalation exclusion",
                        verbose_name="Description",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FollowUp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Date"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Title"
                    ),
                ),
                (
                    "comment",
                    models.TextField(blank=True, null=True, verbose_name="Comment"),
                ),
                (
                    "followup_type",
                    models.CharField(
                        choices=[
                            ("comment", "Comment"),
                            ("status_change", "Status Change"),
                            ("assignment", "Assignment"),
                            ("escalation", "Escalation"),
                            ("resolution", "Resolution"),
                            ("email", "Email"),
                            ("phone", "Phone Call"),
                            ("meeting", "Meeting"),
                            ("system", "System Generated"),
                        ],
                        default="comment",
                        help_text="Type of follow-up action",
                        max_length=20,
                        verbose_name="Follow-up Type",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=False,
                        help_text="Public follow-ups are viewable by the submitter and all staff, but non-public follow-ups can only be seen by staff.",
                        verbose_name="Public",
                    ),
                ),
                (
                    "new_status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Open"),
                            (2, "Reopened"),
                            (3, "Resolved"),
                            (4, "Closed"),
                            (5, "Duplicate"),
                            (6, "On Hold"),
                            (7, "Pending Customer"),
                        ],
                        help_text="If the status was changed, what was it changed to?",
                        null=True,
                        verbose_name="New Status",
                    ),
                ),
                (
                    "old_status",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Open"),
                            (2, "Reopened"),
                            (3, "Resolved"),
                            (4, "Closed"),
                            (5, "Duplicate"),
                            (6, "On Hold"),
                            (7, "Pending Customer"),
                        ],
                        help_text="Previous status before this change",
                        null=True,
                        verbose_name="Previous Status",
                    ),
                ),
                (
                    "time_spent",
                    models.DurationField(
                        blank=True,
                        help_text="Time spent on this follow-up",
                        null=True,
                        verbose_name="Time Spent",
                    ),
                ),
                (
                    "is_billable",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this time should be billed to the customer",
                        verbose_name="Billable",
                    ),
                ),
                (
                    "email_message_id",
                    models.CharField(
                        blank=True,
                        help_text="Message ID for email-based follow-ups",
                        max_length=255,
                        verbose_name="Email Message ID",
                    ),
                ),
                (
                    "email_subject",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Email Subject"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Follow-up",
                "verbose_name_plural": "Follow-ups",
                "ordering": ("date",),
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        max_length=1000,
                        upload_to=helpdesk.models.communication.attachment_path,
                        verbose_name="File",
                    ),
                ),
                (
                    "filename",
                    models.CharField(max_length=1000, verbose_name="Filename"),
                ),
                (
                    "mime_type",
                    models.CharField(max_length=255, verbose_name="MIME Type"),
                ),
                (
                    "size",
                    models.IntegerField(
                        help_text="Size of this file in bytes", verbose_name="Size"
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Uploaded At"),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this attachment is visible to the ticket submitter",
                        verbose_name="Public",
                    ),
                ),
                (
                    "virus_scanned",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this file has been scanned for viruses",
                        verbose_name="Virus Scanned",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who uploaded this file",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "followup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="helpdesk.followup",
                        verbose_name="Follow-up",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attachment",
                "verbose_name_plural": "Attachments",
                "ordering": ("filename",),
            },
        ),
        migrations.CreateModel(
            name="KBCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100, verbose_name="Title")),
                ("slug", models.SlugField(unique=True, verbose_name="Slug")),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this category is currently visible",
                        verbose_name="Active",
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which categories are displayed",
                        verbose_name="Sort Order",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="FontAwesome icon class (e.g., fa-question-circle)",
                        max_length=50,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for category identification",
                        max_length=7,
                        verbose_name="Color",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent category for hierarchical organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="helpdesk.kbcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Knowledge base category",
                "verbose_name_plural": "Knowledge base categories",
                "ordering": ("sort_order", "title"),
            },
        ),
        migrations.CreateModel(
            name="Queue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Display name for this queue",
                        max_length=100,
                        verbose_name="Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="This slug is used when building ticket IDs. Once set, try not to change it or e-mailing may get messy.",
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Internal description of this queue's purpose",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this queue is currently accepting tickets",
                        verbose_name="Active",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this queue appears in public lists",
                        verbose_name="Public Queue",
                    ),
                ),
                (
                    "email_address",
                    models.EmailField(
                        blank=True,
                        help_text="All outgoing e-mails for this queue will use this e-mail address.",
                        max_length=254,
                        null=True,
                        verbose_name="E-Mail Address",
                    ),
                ),
                (
                    "from_name",
                    models.CharField(
                        blank=True,
                        help_text='Display name for outgoing emails (e.g., "Support Team")',
                        max_length=100,
                        verbose_name="From Name",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        blank=True,
                        help_text="Locale of this queue. All correspondence will be in this language.",
                        max_length=10,
                        null=True,
                        verbose_name="Locale",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC",
                        help_text="Timezone for this queue's operations",
                        max_length=50,
                        verbose_name="Timezone",
                    ),
                ),
                (
                    "allow_public_submission",
                    models.BooleanField(
                        default=False,
                        help_text="Should this queue be listed on the public submission form?",
                        verbose_name="Allow Public Submission?",
                    ),
                ),
                (
                    "allow_email_submission",
                    models.BooleanField(
                        default=False,
                        help_text="Do you want to poll the e-mail box below for new tickets?",
                        verbose_name="Allow E-Mail Submission?",
                    ),
                ),
                (
                    "allow_api_submission",
                    models.BooleanField(
                        default=False,
                        help_text="Allow ticket creation via REST API",
                        verbose_name="Allow API Submission?",
                    ),
                ),
                (
                    "require_registration",
                    models.BooleanField(
                        default=False,
                        help_text="Require users to register before submitting tickets",
                        verbose_name="Require Registration",
                    ),
                ),
                (
                    "escalation_type",
                    models.CharField(
                        choices=[
                            ("none", "No Escalation"),
                            ("time_based", "Time-Based Escalation"),
                            ("priority_based", "Priority-Based Escalation"),
                            ("sla_based", "SLA-Based Escalation"),
                        ],
                        default="time_based",
                        help_text="How should tickets in this queue be escalated?",
                        max_length=20,
                        verbose_name="Escalation Type",
                    ),
                ),
                (
                    "escalate_days",
                    models.IntegerField(
                        blank=True,
                        help_text="For tickets which are not held, how often do you wish to increase their priority? Set to 0 for no escalation.",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(365),
                        ],
                        verbose_name="Escalation Days",
                    ),
                ),
                (
                    "sla_response_time",
                    models.DurationField(
                        blank=True,
                        help_text='Maximum time to first response (e.g., "2:00:00" for 2 hours)',
                        null=True,
                        verbose_name="SLA Response Time",
                    ),
                ),
                (
                    "sla_resolution_time",
                    models.DurationField(
                        blank=True,
                        help_text='Maximum time to resolution (e.g., "1 00:00:00" for 1 day)',
                        null=True,
                        verbose_name="SLA Resolution Time",
                    ),
                ),
                (
                    "new_ticket_cc",
                    models.CharField(
                        blank=True,
                        help_text="Email addresses to notify of new tickets (comma-separated)",
                        max_length=500,
                        null=True,
                        verbose_name="New Ticket CC Address",
                    ),
                ),
                (
                    "updated_ticket_cc",
                    models.CharField(
                        blank=True,
                        help_text="Email addresses to notify of ticket updates (comma-separated)",
                        max_length=500,
                        null=True,
                        verbose_name="Updated Ticket CC Address",
                    ),
                ),
                (
                    "send_sms_notifications",
                    models.BooleanField(
                        default=False,
                        help_text="Send SMS notifications for critical tickets",
                        verbose_name="Send SMS Notifications",
                    ),
                ),
                (
                    "email_box_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pop3", "POP3"),
                            ("imap", "IMAP"),
                            ("local", "Local Directory"),
                            ("exchange", "Microsoft Exchange"),
                            ("oauth", "OAuth (Gmail/Outlook)"),
                        ],
                        help_text="E-Mail server type for creating tickets automatically from a mailbox",
                        max_length=10,
                        null=True,
                        verbose_name="E-Mail Box Type",
                    ),
                ),
                (
                    "email_box_host",
                    models.CharField(
                        blank=True,
                        help_text="Your e-mail server address - either domain name or IP address",
                        max_length=200,
                        null=True,
                        verbose_name="E-Mail Hostname",
                    ),
                ),
                (
                    "email_box_port",
                    models.IntegerField(
                        blank=True,
                        help_text="Port number to use for accessing e-mail",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                        verbose_name="E-Mail Port",
                    ),
                ),
                (
                    "email_box_ssl",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to use SSL for IMAP or POP3",
                        verbose_name="Use SSL for E-Mail?",
                    ),
                ),
                (
                    "email_box_user",
                    models.CharField(
                        blank=True,
                        help_text="Username for accessing this mailbox",
                        max_length=200,
                        null=True,
                        verbose_name="E-Mail Username",
                    ),
                ),
                (
                    "email_box_pass",
                    models.CharField(
                        blank=True,
                        help_text="Password for the above username (encrypted in database)",
                        max_length=500,
                        null=True,
                        verbose_name="E-Mail Password",
                    ),
                ),
                (
                    "email_box_imap_folder",
                    models.CharField(
                        blank=True,
                        help_text="IMAP folder to fetch messages from. Default: INBOX",
                        max_length=100,
                        null=True,
                        verbose_name="IMAP Folder",
                    ),
                ),
                (
                    "email_box_local_dir",
                    models.CharField(
                        blank=True,
                        help_text="Local directory path to poll for new email",
                        max_length=500,
                        null=True,
                        verbose_name="E-Mail Local Directory",
                    ),
                ),
                (
                    "email_box_interval",
                    models.IntegerField(
                        blank=True,
                        default=5,
                        help_text="How often to check mailbox (in minutes)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1440),
                        ],
                        verbose_name="E-Mail Check Interval",
                    ),
                ),
                (
                    "email_box_last_check",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="Last Email Check",
                    ),
                ),
                (
                    "socks_proxy_type",
                    models.CharField(
                        blank=True,
                        choices=[("socks4", "SOCKS4"), ("socks5", "SOCKS5")],
                        help_text="SOCKS proxy type for connections",
                        max_length=8,
                        null=True,
                        verbose_name="Socks Proxy Type",
                    ),
                ),
                (
                    "socks_proxy_host",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Socks proxy IP address. Default: 127.0.0.1",
                        null=True,
                        verbose_name="Socks Proxy Host",
                    ),
                ),
                (
                    "socks_proxy_port",
                    models.IntegerField(
                        blank=True,
                        help_text="Socks proxy port number. Default: 9150",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(65535),
                        ],
                        verbose_name="Socks Proxy Port",
                    ),
                ),
                (
                    "logging_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("debug", "Debug"),
                            ("info", "Information"),
                            ("warn", "Warning"),
                            ("error", "Error"),
                            ("crit", "Critical"),
                        ],
                        help_text="Default logging level for this queue",
                        max_length=5,
                        null=True,
                        verbose_name="Logging Type",
                    ),
                ),
                (
                    "logging_dir",
                    models.CharField(
                        blank=True,
                        help_text="Directory for log files. Default: /var/log/helpdesk/",
                        max_length=500,
                        null=True,
                        verbose_name="Logging Directory",
                    ),
                ),
                (
                    "auto_assign",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically assign new tickets to available staff",
                        verbose_name="Auto-assign Tickets",
                    ),
                ),
                (
                    "require_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Require supervisor approval before closing tickets",
                        verbose_name="Require Approval",
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON field for custom queue-specific settings",
                        verbose_name="Custom Queue Settings",
                    ),
                ),
                (
                    "permission_name",
                    models.CharField(
                        blank=True,
                        editable=False,
                        help_text="Name used in the django.contrib.auth permission system",
                        max_length=72,
                        null=True,
                        verbose_name="Django auth permission name",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated"),
                ),
                (
                    "default_owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Default assignee for new tickets in this queue",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="default_owned_queues",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Default owner",
                    ),
                ),
                (
                    "managers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users who can manage this queue",
                        related_name="managed_queues",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Queue",
                "verbose_name_plural": "Queues",
                "ordering": ("title",),
            },
        ),
        migrations.CreateModel(
            name="PreSetReply",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Only used to assist users with selecting a reply - not shown to the user.",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "body",
                    models.TextField(
                        help_text="Context available: {{ ticket }} - ticket object (e.g {{ ticket.title }}); {{ queue }} - The queue; and {{ user }} - the current user.",
                        verbose_name="Body",
                    ),
                ),
                (
                    "reply_type",
                    models.CharField(
                        choices=[
                            ("resolution", "Resolution Template"),
                            ("update", "Status Update"),
                            ("information", "Information Request"),
                            ("escalation", "Escalation Notice"),
                            ("closure", "Ticket Closure"),
                            ("welcome", "Welcome Message"),
                            ("custom", "Custom Template"),
                        ],
                        default="custom",
                        help_text="Category of this reply template",
                        max_length=20,
                        verbose_name="Reply Type",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this template is currently available for use",
                        verbose_name="Active",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Whether replies using this template are public by default",
                        verbose_name="Public Reply",
                    ),
                ),
                (
                    "auto_close_ticket",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically close ticket when this reply is used",
                        verbose_name="Auto-close Ticket",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this template",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "queues",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Leave blank to allow this reply to be used for all queues, or select those queues you wish to limit this reply to.",
                        to="helpdesk.queue",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pre-set reply",
                "verbose_name_plural": "Pre-set replies",
                "ordering": ("reply_type", "name"),
            },
        ),
        migrations.CreateModel(
            name="IgnoreEmail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of this ignore rule",
                        verbose_name="Description",
                    ),
                ),
                (
                    "ignore_type",
                    models.CharField(
                        choices=[
                            ("sender", "Sender Address"),
                            ("subject", "Subject Line"),
                            ("domain", "Domain"),
                            ("regex", "Regular Expression"),
                        ],
                        default="sender",
                        help_text="What type of matching to perform",
                        max_length=20,
                        verbose_name="Ignore Type",
                    ),
                ),
                (
                    "email_address",
                    models.CharField(
                        help_text="Enter a full e-mail address, domain, subject pattern, or regex. Use wildcards like *@domain.com for domains.",
                        max_length=500,
                        verbose_name="Pattern",
                    ),
                ),
                (
                    "case_sensitive",
                    models.BooleanField(
                        default=False,
                        help_text="Whether pattern matching should be case sensitive",
                        verbose_name="Case Sensitive",
                    ),
                ),
                (
                    "keep_in_mailbox",
                    models.BooleanField(
                        default=False,
                        help_text="Keep emails in mailbox instead of deleting them",
                        verbose_name="Keep in Mailbox",
                    ),
                ),
                (
                    "create_ticket_anyway",
                    models.BooleanField(
                        default=False,
                        help_text="Create ticket but mark as ignored (for logging purposes)",
                        verbose_name="Create Ticket Anyway",
                    ),
                ),
                (
                    "forward_to",
                    models.EmailField(
                        blank=True,
                        help_text="Forward ignored emails to this address",
                        max_length=254,
                        verbose_name="Forward To",
                    ),
                ),
                (
                    "hit_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this rule has matched",
                        verbose_name="Hit Count",
                    ),
                ),
                (
                    "last_hit",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this rule was last triggered",
                        null=True,
                        verbose_name="Last Hit",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this ignore rule is currently active",
                        verbose_name="Active",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Date on which this rule was added",
                        verbose_name="Date Created",
                    ),
                ),
                (
                    "queues",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Leave blank for this rule to apply to all queues, or select specific queues.",
                        to="helpdesk.queue",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ignored e-mail address",
                "verbose_name_plural": "Ignored e-mail addresses",
                "ordering": ["-hit_count", "name"],
            },
        ),
        migrations.CreateModel(
            name="EmailTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "template_name",
                    models.CharField(max_length=100, verbose_name="Template Name"),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("new_ticket", "New Ticket Notification"),
                            ("updated_ticket", "Ticket Updated"),
                            ("resolved_ticket", "Ticket Resolved"),
                            ("closed_ticket", "Ticket Closed"),
                            ("assigned_ticket", "Ticket Assigned"),
                            ("escalated_ticket", "Ticket Escalated"),
                            ("reminder", "Reminder/Follow-up"),
                            ("satisfaction", "Satisfaction Survey"),
                            ("custom", "Custom Template"),
                        ],
                        default="custom",
                        help_text="Purpose of this email template",
                        max_length=20,
                        verbose_name="Template Type",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text='This will be prefixed with "[ticket.ticket] ticket.title". We recommend something simple such as "(Updated") or "(Closed)" - the same context is available as in plain_text, below.',
                        max_length=100,
                        verbose_name="Subject",
                    ),
                ),
                (
                    "heading",
                    models.CharField(
                        help_text="In HTML e-mails, this will be the heading at the top of the email - the same context is available as in plain_text, below.",
                        max_length=100,
                        verbose_name="Heading",
                    ),
                ),
                (
                    "plain_text",
                    models.TextField(
                        help_text="The context available to you includes {{ ticket }}, {{ queue }}, and depending on the time of the call: {{ resolution }} or {{ comment }}.",
                        verbose_name="Plain Text",
                    ),
                ),
                (
                    "html",
                    models.TextField(
                        help_text="The same context is available here as in plain_text, above.",
                        verbose_name="HTML",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        blank=True,
                        help_text="Locale of this template.",
                        max_length=10,
                        null=True,
                        verbose_name="Locale",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this template is currently available for use",
                        verbose_name="Active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated"),
                ),
                (
                    "queues",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Leave blank to use for all queues, or select specific queues",
                        to="helpdesk.queue",
                    ),
                ),
            ],
            options={
                "verbose_name": "e-mail template",
                "verbose_name_plural": "e-mail templates",
                "ordering": ("template_type", "template_name", "locale"),
            },
        ),
        migrations.CreateModel(
            name="CustomField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.SlugField(
                        help_text="As used in the database and behind the scenes. Must be unique and consist of only lowercase letters with no punctuation.",
                        unique=True,
                        verbose_name="Field Name",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The display label for this field",
                        max_length=100,
                        verbose_name="Label",
                    ),
                ),
                (
                    "help_text",
                    models.TextField(
                        blank=True,
                        help_text="Shown to the user when editing the ticket",
                        null=True,
                        verbose_name="Help Text",
                    ),
                ),
                (
                    "placeholder",
                    models.CharField(
                        blank=True,
                        help_text="Placeholder text shown in the input field",
                        max_length=100,
                        verbose_name="Placeholder",
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("varchar", "Character (single line)"),
                            ("text", "Text (multi-line)"),
                            ("integer", "Integer"),
                            ("decimal", "Decimal"),
                            ("list", "List"),
                            ("boolean", "Boolean (checkbox yes/no)"),
                            ("date", "Date"),
                            ("time", "Time"),
                            ("datetime", "Date & Time"),
                            ("email", "E-Mail Address"),
                            ("url", "URL"),
                            ("ipaddress", "IP Address"),
                            ("slug", "Slug"),
                            ("file", "File Upload"),
                            ("json", "JSON Data"),
                        ],
                        help_text="Allows you to restrict the data entered into this field",
                        max_length=100,
                        verbose_name="Data Type",
                    ),
                ),
                (
                    "field_group",
                    models.CharField(
                        choices=[
                            ("basic", "Basic Information"),
                            ("technical", "Technical Details"),
                            ("business", "Business Information"),
                            ("custom", "Custom Fields"),
                        ],
                        default="custom",
                        help_text="Group this field belongs to for organization",
                        max_length=20,
                        verbose_name="Field Group",
                    ),
                ),
                (
                    "max_length",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name="Maximum Length (characters)",
                    ),
                ),
                (
                    "decimal_places",
                    models.IntegerField(
                        blank=True,
                        help_text="Only used for decimal fields",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Decimal Places",
                    ),
                ),
                (
                    "min_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        help_text="Minimum value for numeric fields",
                        max_digits=15,
                        null=True,
                        verbose_name="Minimum Value",
                    ),
                ),
                (
                    "max_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        help_text="Maximum value for numeric fields",
                        max_digits=15,
                        null=True,
                        verbose_name="Maximum Value",
                    ),
                ),
                (
                    "empty_selection_list",
                    models.BooleanField(
                        default=False,
                        help_text="Only for List: adds an empty first entry to the choices list, which enforces that the user makes an active choice.",
                        verbose_name="Add empty first choice to List?",
                    ),
                ),
                (
                    "list_values",
                    models.TextField(
                        blank=True,
                        help_text="For list fields only. Enter one option per line.",
                        null=True,
                        verbose_name="List Values",
                    ),
                ),
                (
                    "allow_multiple",
                    models.BooleanField(
                        default=False,
                        help_text="For list fields: allow multiple selections",
                        verbose_name="Allow Multiple Selections",
                    ),
                ),
                (
                    "ordering",
                    models.IntegerField(
                        default=0,
                        help_text="Lower numbers are displayed first; higher numbers are listed later",
                        verbose_name="Ordering",
                    ),
                ),
                (
                    "required",
                    models.BooleanField(
                        default=False,
                        help_text="Does the user have to enter a value for this field?",
                        verbose_name="Required?",
                    ),
                ),
                (
                    "staff_only",
                    models.BooleanField(
                        default=False,
                        help_text="If this is ticked, then the public submission form will NOT show this field",
                        verbose_name="Staff Only?",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this field is currently available for use",
                        verbose_name="Active",
                    ),
                ),
                (
                    "queues",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Leave blank to use for all queues, or select specific queues",
                        to="helpdesk.queue",
                    ),
                ),
            ],
            options={
                "verbose_name": "Custom field",
                "verbose_name_plural": "Custom fields",
                "ordering": ["field_group", "ordering", "label"],
            },
        ),
        migrations.CreateModel(
            name="SavedSearch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="User-provided name for this query",
                        max_length=100,
                        verbose_name="Query Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this search does",
                        verbose_name="Description",
                    ),
                ),
                (
                    "search_type",
                    models.CharField(
                        choices=[
                            ("ticket", "Ticket Search"),
                            ("kb", "Knowledge Base Search"),
                            ("user", "User Search"),
                            ("queue", "Queue Search"),
                            ("report", "Report Query"),
                        ],
                        default="ticket",
                        help_text="Type of search this query performs",
                        max_length=20,
                        verbose_name="Search Type",
                    ),
                ),
                (
                    "shared",
                    models.BooleanField(
                        default=False,
                        help_text="Should other users see this query?",
                        verbose_name="Shared With Other Users?",
                    ),
                ),
                (
                    "query",
                    models.TextField(
                        help_text="Pickled query object. Be wary changing this.",
                        verbose_name="Search Query",
                    ),
                ),
                (
                    "query_params",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON representation of search parameters",
                        verbose_name="Query Parameters",
                    ),
                ),
                (
                    "is_alert",
                    models.BooleanField(
                        default=False,
                        help_text="Send email when this search has new results",
                        verbose_name="Email Alert",
                    ),
                ),
                (
                    "alert_frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("immediate", "Immediate"),
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                        ],
                        help_text="How often to check for new results",
                        max_length=20,
                        verbose_name="Alert Frequency",
                    ),
                ),
                (
                    "last_run",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this search was last executed",
                        null=True,
                        verbose_name="Last Run",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated"),
                ),
                (
                    "shared_with_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific groups this search is shared with",
                        to="auth.group",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Saved search",
                "verbose_name_plural": "Saved searches",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief description of the issue",
                        max_length=200,
                        verbose_name="Title",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="The content of the customer's query.",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "ticket_type",
                    models.CharField(
                        choices=[
                            ("bug", "Bug Report"),
                            ("feature", "Feature Request"),
                            ("support", "Support Request"),
                            ("question", "Question"),
                            ("incident", "Incident"),
                            ("change", "Change Request"),
                            ("maintenance", "Maintenance"),
                            ("other", "Other"),
                        ],
                        default="support",
                        help_text="What type of request is this?",
                        max_length=20,
                        verbose_name="Ticket Type",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for API and external integrations",
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
                (
                    "submitter_email",
                    models.EmailField(
                        blank=True,
                        help_text="The submitter will receive an email for all public follow-ups.",
                        max_length=254,
                        null=True,
                        verbose_name="Submitter E-Mail",
                    ),
                ),
                (
                    "submitter_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the person who submitted this ticket",
                        max_length=100,
                        verbose_name="Submitter Name",
                    ),
                ),
                (
                    "submitter_phone",
                    models.CharField(
                        blank=True,
                        help_text="Phone number of the submitter",
                        max_length=20,
                        verbose_name="Submitter Phone",
                    ),
                ),
                (
                    "submitter_organization",
                    models.CharField(
                        blank=True,
                        help_text="Organization the submitter belongs to",
                        max_length=100,
                        verbose_name="Organization",
                    ),
                ),
                (
                    "assigned_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this ticket was assigned to current user",
                        null=True,
                        verbose_name="Assigned Date",
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (1, "Open"),
                            (2, "Reopened"),
                            (3, "Resolved"),
                            (4, "Closed"),
                            (5, "Duplicate"),
                            (6, "On Hold"),
                            (7, "Pending Customer"),
                        ],
                        default=1,
                        verbose_name="Status",
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        choices=[
                            (1, "1. Critical"),
                            (2, "2. High"),
                            (3, "3. Normal"),
                            (4, "4. Low"),
                            (5, "5. Very Low"),
                        ],
                        default=3,
                        help_text="1 = Highest Priority, 5 = Low Priority",
                        verbose_name="Priority",
                    ),
                ),
                (
                    "urgency",
                    models.IntegerField(
                        choices=[
                            (1, "Critical - System Down"),
                            (2, "High - Major Impact"),
                            (3, "Medium - Some Impact"),
                            (4, "Low - Minor Impact"),
                            (5, "Planning - No Impact"),
                        ],
                        default=3,
                        help_text="Business impact of this issue",
                        verbose_name="Urgency",
                    ),
                ),
                (
                    "on_hold",
                    models.BooleanField(
                        default=False,
                        help_text="If a ticket is on hold, it will not automatically be escalated.",
                        verbose_name="On Hold",
                    ),
                ),
                (
                    "hold_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason why this ticket is on hold",
                        verbose_name="Hold Reason",
                    ),
                ),
                (
                    "resolution",
                    models.TextField(
                        blank=True,
                        help_text="The resolution provided to the customer by our staff.",
                        null=True,
                        verbose_name="Resolution",
                    ),
                ),
                (
                    "resolution_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this ticket was resolved",
                        null=True,
                        verbose_name="Resolution Date",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        help_text="Date this ticket was first created",
                        verbose_name="Created",
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        help_text="Date this ticket was most recently changed.",
                        verbose_name="Modified",
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this ticket should be resolved",
                        null=True,
                        verbose_name="Due Date",
                    ),
                ),
                (
                    "first_response_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the first response was sent to the customer",
                        null=True,
                        verbose_name="First Response Date",
                    ),
                ),
                (
                    "last_escalation",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date this ticket was last escalated",
                        null=True,
                        verbose_name="Last Escalation",
                    ),
                ),
                (
                    "escalation_level",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="How many times this ticket has been escalated",
                        verbose_name="Escalation Level",
                    ),
                ),
                (
                    "satisfaction_rating",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Customer satisfaction rating (1-5 stars)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Satisfaction Rating",
                    ),
                ),
                (
                    "satisfaction_comment",
                    models.TextField(
                        blank=True,
                        help_text="Customer feedback about the resolution",
                        verbose_name="Satisfaction Comment",
                    ),
                ),
                (
                    "time_spent",
                    models.DurationField(
                        blank=True,
                        help_text="Total time spent working on this ticket",
                        null=True,
                        verbose_name="Time Spent",
                    ),
                ),
                (
                    "billable_time",
                    models.DurationField(
                        blank=True,
                        help_text="Billable time for this ticket",
                        null=True,
                        verbose_name="Billable Time",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Physical location where issue occurred",
                        max_length=100,
                        verbose_name="Location",
                    ),
                ),
                (
                    "environment",
                    models.CharField(
                        blank=True,
                        help_text="Environment where issue occurred (prod, test, dev)",
                        max_length=50,
                        verbose_name="Environment",
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags for categorization",
                        max_length=500,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "external_reference",
                    models.CharField(
                        blank=True,
                        help_text="Reference number from external system",
                        max_length=100,
                        verbose_name="External Reference",
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON field for custom ticket data",
                        verbose_name="Custom Fields",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assigned to",
                    ),
                ),
                (
                    "closed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="closed_tickets",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Closed by",
                    ),
                ),
                (
                    "queue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tickets",
                        to="helpdesk.queue",
                        verbose_name="Queue",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticket",
                "verbose_name_plural": "Tickets",
                "ordering": ("-created",),
                "get_latest_by": "created",
            },
        ),
        migrations.AddField(
            model_name="followup",
            name="ticket",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="followups",
                to="helpdesk.ticket",
                verbose_name="Ticket",
            ),
        ),
        migrations.CreateModel(
            name="TicketCC",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address to CC (if not a system user)",
                        max_length=254,
                        verbose_name="Email",
                    ),
                ),
                (
                    "can_view",
                    models.BooleanField(
                        default=True,
                        help_text="Can this person view the ticket?",
                        verbose_name="Can View",
                    ),
                ),
                (
                    "can_update",
                    models.BooleanField(
                        default=False,
                        help_text="Can this person update the ticket?",
                        verbose_name="Can Update",
                    ),
                ),
                (
                    "notify_on_new_followup",
                    models.BooleanField(
                        default=True,
                        help_text="Send notifications when new follow-ups are added",
                        verbose_name="Notify on New Follow-up",
                    ),
                ),
                (
                    "notify_on_status_change",
                    models.BooleanField(
                        default=True,
                        help_text="Send notifications when ticket status changes",
                        verbose_name="Notify on Status Change",
                    ),
                ),
                (
                    "notify_on_assignment",
                    models.BooleanField(
                        default=True,
                        help_text="Send notifications when ticket is assigned/reassigned",
                        verbose_name="Notify on Assignment",
                    ),
                ),
                (
                    "added_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Added Date"),
                ),
                (
                    "notes",
                    models.CharField(
                        blank=True,
                        help_text="Why this person was added to CC",
                        max_length=200,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "added_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="added_cc_entries",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Added By",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cc_list",
                        to="helpdesk.ticket",
                        verbose_name="Ticket",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User to CC on ticket updates",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticket CC",
                "verbose_name_plural": "Ticket CCs",
                "ordering": ["added_date"],
            },
        ),
        migrations.CreateModel(
            name="TicketChange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("field", models.CharField(max_length=100, verbose_name="Field")),
                (
                    "old_value",
                    models.TextField(blank=True, null=True, verbose_name="Old Value"),
                ),
                (
                    "new_value",
                    models.TextField(blank=True, null=True, verbose_name="New Value"),
                ),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("field_change", "Field Change"),
                            ("assignment", "Assignment"),
                            ("status", "Status Change"),
                            ("priority", "Priority Change"),
                        ],
                        default="field_change",
                        max_length=20,
                        verbose_name="Change Type",
                    ),
                ),
                (
                    "followup",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="changes",
                        to="helpdesk.followup",
                        verbose_name="Follow-up",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticket change",
                "verbose_name_plural": "Ticket changes",
            },
        ),
        migrations.CreateModel(
            name="TicketCustomFieldValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("value", models.TextField(blank=True, null=True)),
                (
                    "value_text",
                    models.TextField(blank=True, null=True, verbose_name="Text Value"),
                ),
                (
                    "value_integer",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Integer Value"
                    ),
                ),
                (
                    "value_decimal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=5,
                        max_digits=15,
                        null=True,
                        verbose_name="Decimal Value",
                    ),
                ),
                (
                    "value_boolean",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="Boolean Value"
                    ),
                ),
                (
                    "value_date",
                    models.DateField(blank=True, null=True, verbose_name="Date Value"),
                ),
                (
                    "value_datetime",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="DateTime Value"
                    ),
                ),
                (
                    "value_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="custom_fields/%Y/%m/%d/",
                        verbose_name="File Value",
                    ),
                ),
                (
                    "field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="helpdesk.customfield",
                        verbose_name="Field",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="custom_field_values",
                        to="helpdesk.ticket",
                        verbose_name="Ticket",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticket custom field value",
                "verbose_name_plural": "Ticket custom field values",
            },
        ),
        migrations.CreateModel(
            name="TicketDependency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dependency_type",
                    models.CharField(
                        choices=[
                            ("blocks", "Blocks"),
                            ("blocked_by", "Blocked By"),
                            ("relates_to", "Relates To"),
                            ("duplicates", "Duplicates"),
                            ("duplicated_by", "Duplicated By"),
                            ("child_of", "Child Of"),
                            ("parent_of", "Parent Of"),
                        ],
                        default="blocks",
                        help_text="How these tickets are related",
                        max_length=20,
                        verbose_name="Dependency Type",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about this dependency",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "depends_on",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dependents",
                        to="helpdesk.ticket",
                        verbose_name="Depends On",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dependencies",
                        to="helpdesk.ticket",
                        verbose_name="Ticket",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticket Dependency",
                "verbose_name_plural": "Ticket Dependencies",
                "ordering": ["created"],
            },
        ),
        migrations.CreateModel(
            name="UserSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "items_per_page",
                    models.PositiveIntegerField(
                        default=25,
                        help_text="Number of items to show per page in lists",
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Items Per Page",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("light", "Light Theme"),
                            ("dark", "Dark Theme"),
                            ("auto", "Auto (System Preference)"),
                        ],
                        default="auto",
                        help_text="Visual theme preference",
                        max_length=10,
                        verbose_name="Theme",
                    ),
                ),
                (
                    "notification_preference",
                    models.CharField(
                        choices=[
                            ("email", "Email Only"),
                            ("sms", "SMS Only"),
                            ("both", "Email and SMS"),
                            ("none", "No Notifications"),
                        ],
                        default="email",
                        help_text="How you prefer to receive notifications",
                        max_length=10,
                        verbose_name="Notification Preference",
                    ),
                ),
                (
                    "notify_assigned",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notifications when tickets are assigned to you",
                        verbose_name="Notify When Assigned",
                    ),
                ),
                (
                    "notify_updated",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notifications when your tickets are updated",
                        verbose_name="Notify When Updated",
                    ),
                ),
                (
                    "notify_closed",
                    models.BooleanField(
                        default=False,
                        help_text="Receive notifications when your tickets are closed",
                        verbose_name="Notify When Closed",
                    ),
                ),
                (
                    "notify_escalated",
                    models.BooleanField(
                        default=True,
                        help_text="Receive notifications when tickets are escalated",
                        verbose_name="Notify When Escalated",
                    ),
                ),
                (
                    "show_dashboard_stats",
                    models.BooleanField(
                        default=True,
                        help_text="Display statistics widgets on dashboard",
                        verbose_name="Show Dashboard Statistics",
                    ),
                ),
                (
                    "show_recent_activity",
                    models.BooleanField(
                        default=True,
                        help_text="Display recent activity feed on dashboard",
                        verbose_name="Show Recent Activity",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Phone number for SMS notifications",
                        max_length=20,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "slack_user_id",
                    models.CharField(
                        blank=True,
                        help_text="Slack user ID for Slack notifications",
                        max_length=50,
                        verbose_name="Slack User ID",
                    ),
                ),
                (
                    "settings_pickled",
                    models.TextField(
                        blank=True,
                        help_text="This is a base64-encoded representation of a pickled Python dictionary. Do not change this field via the admin.",
                        null=True,
                        verbose_name="Legacy Settings Dictionary",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated"),
                ),
                (
                    "default_queue",
                    models.ForeignKey(
                        blank=True,
                        help_text="Default queue for new tickets",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="helpdesk.queue",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="helpdesk_settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Setting",
                "verbose_name_plural": "User Settings",
            },
        ),
        migrations.CreateModel(
            name="KBItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=100, verbose_name="Title")),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Auto-generated from title if left blank",
                        verbose_name="Slug",
                    ),
                ),
                ("question", models.TextField(verbose_name="Question")),
                ("answer", models.TextField(verbose_name="Answer")),
                (
                    "is_published",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this item is visible to users",
                        verbose_name="Published",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this item appears in featured lists",
                        verbose_name="Featured",
                    ),
                ),
                (
                    "votes",
                    models.IntegerField(
                        default=0,
                        help_text="Total number of votes cast for this item",
                        verbose_name="Total Votes",
                    ),
                ),
                (
                    "recommendations",
                    models.IntegerField(
                        default=0,
                        help_text="Number of votes for this item which were POSITIVE.",
                        verbose_name="Positive Votes",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this item has been viewed",
                        verbose_name="View Count",
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags for better searchability",
                        max_length=500,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "keywords",
                    models.CharField(
                        blank=True,
                        help_text="Keywords for search optimization",
                        max_length=500,
                        verbose_name="Keywords",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date on which this question was most recently changed.",
                        verbose_name="Last Updated",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="kbitems",
                        to="helpdesk.kbcategory",
                        verbose_name="Category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this KB item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_kb_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this KB item",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_kb_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Knowledge base item",
                "verbose_name_plural": "Knowledge base items",
                "ordering": ("-is_featured", "-recommendations", "title"),
                "indexes": [
                    models.Index(
                        fields=["is_published", "is_featured"],
                        name="helpdesk_kb_is_publ_77b65b_idx",
                    ),
                    models.Index(
                        fields=["category", "is_published"],
                        name="helpdesk_kb_categor_1bcc6b_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="queue",
            index=models.Index(
                fields=["is_active", "allow_public_submission"],
                name="helpdesk_qu_is_acti_4f7d77_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="queue",
            index=models.Index(fields=["slug"], name="helpdesk_qu_slug_98c584_idx"),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["status", "priority"], name="helpdesk_ti_status_55b34b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["assigned_to", "status"], name="helpdesk_ti_assigne_9eea75_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["queue", "status"], name="helpdesk_ti_queue_i_ca016d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["due_date"], name="helpdesk_ti_due_dat_c9d90e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["created"], name="helpdesk_ti_created_0f8fcc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="followup",
            index=models.Index(
                fields=["ticket", "date"], name="helpdesk_fo_ticket__d09799_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="followup",
            index=models.Index(
                fields=["public", "date"], name="helpdesk_fo_public_3b484f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="ticketcc",
            unique_together={("ticket", "user", "email")},
        ),
        migrations.AddIndex(
            model_name="ticketchange",
            index=models.Index(
                fields=["followup", "field"], name="helpdesk_ti_followu_0dc607_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticketcustomfieldvalue",
            index=models.Index(
                fields=["ticket", "field"], name="helpdesk_ti_ticket__ff09f2_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="ticketcustomfieldvalue",
            unique_together={("ticket", "field")},
        ),
        migrations.AlterUniqueTogether(
            name="ticketdependency",
            unique_together={("ticket", "depends_on", "dependency_type")},
        ),
    ]
