# Generated by Django 5.2 on 2025-06-20 04:04

import datetime
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("material", "0001_initial"),
        ("project", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Rule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32, verbose_name="name")),
                ("description", models.TextField(verbose_name="description")),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("YEARLY", "Yearly"),
                            ("MONTHLY", "Monthly"),
                            ("WEEKLY", "Weekly"),
                            ("DAILY", "Daily"),
                            ("HOURLY", "Hourly"),
                            ("MINUTELY", "Minutely"),
                            ("SECONDLY", "Secondly"),
                        ],
                        max_length=10,
                        verbose_name="frequency",
                    ),
                ),
                ("params", models.TextField(blank=True, verbose_name="params")),
            ],
            options={
                "verbose_name": "rule",
                "verbose_name_plural": "rules",
            },
        ),
        migrations.CreateModel(
            name="Calendar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                (
                    "slug",
                    models.SlugField(max_length=200, unique=True, verbose_name="slug"),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Calendar description"),
                ),
                (
                    "calendar_type",
                    models.CharField(
                        choices=[
                            ("project", "Project Calendar"),
                            ("worker", "Worker Calendar"),
                            ("company", "Company Calendar"),
                            ("department", "Department Calendar"),
                            ("maintenance", "Maintenance Calendar"),
                            ("training", "Training Calendar"),
                            ("holiday", "Holiday Calendar"),
                            ("custom", "Custom Calendar"),
                        ],
                        default="custom",
                        help_text="Type of calendar",
                        max_length=20,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        choices=[
                            ("#007bff", "Blue"),
                            ("#28a745", "Green"),
                            ("#dc3545", "Red"),
                            ("#ffc107", "Yellow"),
                            ("#17a2b8", "Cyan"),
                            ("#6f42c1", "Purple"),
                            ("#fd7e14", "Orange"),
                            ("#6c757d", "Gray"),
                            ("#343a40", "Dark"),
                            ("#e83e8c", "Pink"),
                        ],
                        default="#007bff",
                        help_text="Calendar display color",
                        max_length=7,
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="FontAwesome icon class (e.g., fa-calendar)",
                        max_length=50,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this calendar is visible to all users",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this calendar is currently active",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", help_text="Calendar timezone", max_length=50
                    ),
                ),
                (
                    "default_event_duration",
                    models.DurationField(
                        default=datetime.timedelta(seconds=3600),
                        help_text="Default duration for new events",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False, help_text="Whether events require approval"
                    ),
                ),
                (
                    "auto_accept_events",
                    models.BooleanField(
                        default=True,
                        help_text="Auto-accept events from trusted sources",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Calendar owner",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_calendars",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "calendar",
                "verbose_name_plural": "calendars",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("meeting", "Meeting"),
                            ("project_work", "Project Work"),
                            ("training", "Training"),
                            ("maintenance", "Maintenance"),
                            ("inspection", "Inspection"),
                            ("delivery", "Delivery"),
                            ("travel", "Travel"),
                            ("holiday", "Holiday"),
                            ("sick_leave", "Sick Leave"),
                            ("vacation", "Vacation"),
                            ("personal", "Personal Time"),
                            ("conference", "Conference"),
                            ("site_visit", "Site Visit"),
                            ("emergency", "Emergency"),
                            ("other", "Other"),
                        ],
                        default="other",
                        help_text="Type of event",
                        max_length=20,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Event location", max_length=200
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True, help_text="Contractor notes", null=True
                    ),
                ),
                (
                    "equip",
                    models.TextField(
                        blank=True, help_text="Equipment needed", null=True
                    ),
                ),
                (
                    "details",
                    models.TextField(
                        blank=True, help_text="Additional details", null=True
                    ),
                ),
                ("start", models.DateTimeField(db_index=True, verbose_name="start")),
                (
                    "end",
                    models.DateTimeField(
                        db_index=True,
                        help_text="The end time must be later than the start time.",
                        verbose_name="end",
                    ),
                ),
                (
                    "all_day",
                    models.BooleanField(
                        default=False, help_text="Is this an all-day event?"
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True, help_text="Meet at the office time", null=True
                    ),
                ),
                (
                    "dist_time",
                    models.TimeField(
                        blank=True, help_text="Parts pickup time", null=True
                    ),
                ),
                (
                    "required_workers",
                    models.PositiveIntegerField(
                        default=1, help_text="Number of workers required"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("confirmed", "Confirmed"),
                            ("tentative", "Tentative"),
                            ("cancelled", "Cancelled"),
                            ("completed", "Completed"),
                            ("no_show", "No Show"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        default="confirmed",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                (
                    "privacy",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("confidential", "Confidential"),
                        ],
                        default="public",
                        max_length=15,
                    ),
                ),
                (
                    "end_recurring_period",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="This date is ignored for one time only events.",
                        null=True,
                        verbose_name="end recurring period",
                    ),
                ),
                (
                    "color_event",
                    models.CharField(
                        blank=True,
                        help_text="Hex color code for event display",
                        max_length=7,
                        verbose_name="Event color",
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, help_text="FontAwesome icon class", max_length=50
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated cost for this event",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost incurred",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "reminder_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Send reminder X minutes before event",
                        null=True,
                    ),
                ),
                (
                    "send_invitations",
                    models.BooleanField(
                        default=False,
                        help_text="Send email invitations to participants",
                    ),
                ),
                (
                    "completion_notes",
                    models.TextField(
                        blank=True, help_text="Notes about event completion"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the event was marked complete",
                        null=True,
                    ),
                ),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Event-related documents",
                        null=True,
                        upload_to="events/attachments/%Y/%m/%d/",
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="External system ID for integration",
                        max_length=100,
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        blank=True,
                        help_text="Synchronization status with external systems",
                        max_length=20,
                    ),
                ),
                (
                    "Supplier",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parts Supplier",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="material.supplier",
                    ),
                ),
                (
                    "calendar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="schedule.calendar",
                        verbose_name="calendar",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_events",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="creator",
                    ),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        blank=True,
                        help_text="Event lead/supervisor",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="led_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated project",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="project.project",
                    ),
                ),
                (
                    "workers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Assigned workers",
                        related_name="assigned_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select '----' for a one time only event.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="schedule.rule",
                        verbose_name="rule",
                    ),
                ),
            ],
            options={
                "verbose_name": "event",
                "verbose_name_plural": "events",
                "ordering": ["start"],
            },
        ),
        migrations.CreateModel(
            name="CalendarRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("object_id", models.IntegerField(db_index=True)),
                (
                    "distinction",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="distinction"
                    ),
                ),
                (
                    "inheritable",
                    models.BooleanField(default=True, verbose_name="inheritable"),
                ),
                (
                    "permission_level",
                    models.CharField(
                        choices=[
                            ("view", "View Only"),
                            ("contribute", "Can Add Events"),
                            ("edit", "Can Edit Events"),
                            ("manage", "Can Manage Calendar"),
                            ("admin", "Full Admin Access"),
                        ],
                        default="view",
                        help_text="Permission level for this relation",
                        max_length=20,
                    ),
                ),
                (
                    "notify_on_changes",
                    models.BooleanField(
                        default=False,
                        help_text="Send notifications when calendar changes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "calendar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="schedule.calendar",
                        verbose_name="calendar",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "calendar relation",
                "verbose_name_plural": "calendar relations",
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="schedule_ca_content_cddadb_idx",
                    )
                ],
                "unique_together": {
                    ("calendar", "content_type", "object_id", "distinction")
                },
            },
        ),
        migrations.CreateModel(
            name="EventRelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("object_id", models.IntegerField(db_index=True)),
                (
                    "distinction",
                    models.CharField(
                        choices=[
                            ("attendee", "Attendee"),
                            ("organizer", "Organizer"),
                            ("resource", "Resource"),
                            ("location", "Location"),
                            ("viewer", "Viewer"),
                            ("participant", "Participant"),
                            ("observer", "Observer"),
                        ],
                        default="participant",
                        max_length=20,
                        verbose_name="distinction",
                    ),
                ),
                (
                    "response_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("declined", "Declined"),
                            ("tentative", "Tentative"),
                        ],
                        default="pending",
                        help_text="Response to event invitation",
                        max_length=20,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False, help_text="Is participation required?"
                    ),
                ),
                (
                    "send_notifications",
                    models.BooleanField(
                        default=True, help_text="Send notifications to this participant"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="schedule.event",
                        verbose_name="event",
                    ),
                ),
            ],
            options={
                "verbose_name": "event relation",
                "verbose_name_plural": "event relations",
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="schedule_ev_content_6ceecb_idx",
                    )
                ],
                "unique_together": {
                    ("event", "content_type", "object_id", "distinction")
                },
            },
        ),
        migrations.CreateModel(
            name="Occurrence",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("start", models.DateTimeField(db_index=True, verbose_name="start")),
                ("end", models.DateTimeField(db_index=True, verbose_name="end")),
                (
                    "cancelled",
                    models.BooleanField(default=False, verbose_name="cancelled"),
                ),
                ("original_start", models.DateTimeField(verbose_name="original start")),
                ("original_end", models.DateTimeField(verbose_name="original end")),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes specific to this occurrence"
                    ),
                ),
                (
                    "status_override",
                    models.CharField(
                        blank=True,
                        help_text="Override status for this specific occurrence",
                        max_length=20,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="schedule.event",
                        verbose_name="event",
                    ),
                ),
            ],
            options={
                "verbose_name": "occurrence",
                "verbose_name_plural": "occurrences",
                "ordering": ["start"],
                "indexes": [
                    models.Index(
                        fields=["start", "end"], name="schedule_oc_start_76a2f8_idx"
                    ),
                    models.Index(
                        fields=["event", "start"], name="schedule_oc_event_i_375ef7_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["start", "end"], name="schedule_ev_start_a258cb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["calendar", "start"], name="schedule_ev_calenda_cf3e73_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["project", "start"], name="schedule_ev_project_e6b06b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["status", "start"], name="schedule_ev_status_7a3ff3_idx"
            ),
        ),
    ]
